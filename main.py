import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
import random
import logging
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

PDF_FILE_PATH = "Ultimate_Gray_Schemes.pdf"
TON_WALLET = "UQCBoBwjzbgw1eptiMrKbdpmX83al1qlaKFnUvI86zQnW4YP"
USDT_WALLET = "TUVCh2u3gqwU8kfwzgjmJMUFPXTneFf9Kk"

FAKE_PURCHASES = random.randint(317, 563)

start_text = f"""
<b>üíº ULTIMATE GRAY SCHEMES ‚Äî –†–ê–°–ö–†–´–¢–û</b>

‚ö†Ô∏è <b>–ü–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!</b>
–°—Ö–µ–º—ã –º–∞—Å—Å–æ–≤–æ —Å–ª–∏–≤–∞—é—Ç. –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ <b>{FAKE_PURCHASES}</b> –∫–æ–ø–∏–π.

<b>–¶–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞: 5 USDT –∏–ª–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ TON</b>
–¢—ã –ø–æ–ª—É—á–∞–µ—à—å PDF-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä—ã–º–∏ —Å–≤—è–∑–∫–∞–º–∏, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –±—É–ª–ª—à–∏—Ç–∞.

üëá –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:
"""

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å 5 USDT (TRC20)", url=f"https://tronscan.org/#/address/{USDT_WALLET}")
    kb.button(text="üåÄ –û–ø–ª–∞—Ç–∏—Ç—å TON", url=f"https://tonviewer.com/{TON_WALLET}")
    kb.button(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å PDF", callback_data="get_pdf")
    await message.answer(start_text, reply_markup=kb.as_markup())

@dp.callback_query(F.data == "get_pdf")
async def send_pdf(call: CallbackQuery):
    await call.answer()
    doc = FSInputFile(PDF_FILE_PATH)
    await call.message.answer_document(document=doc, caption="<b>üìÇ –¢–≤–æ–π —Ñ–∞–π–ª: Ultimate Gray Schemes</b>")

@dp.message(F.text.lower().in_(["–∏—Å—Ç–æ—Ä–∏—è", "history"]))
async def send_story(message: Message):
    await message.answer("<i>üß† –≠—Ç–æ –Ω–µ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ. –≠—Ç–æ ‚Äî –ø—Ä–æ–¥–∞–∂–∞ —Å–µ—Ä–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
–í—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –µ—ë –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –º–∏–º–æ.</i>")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
    [InlineKeyboardButton(text="üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", url="https://t.me/GrayKitBot")],
    [InlineKeyboardButton(text="üìÑ PDF", callback_data="pdf")],
    [InlineKeyboardButton(text="üì• –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å?", callback_data="how_to_get")],
])

# üü¢ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç GrayKitBot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_keyboard
    )

# üìú –ò—Å—Ç–æ—Ä–∏—è
@dp.callback_query(F.data == "history")
async def show_history(callback: types.CallbackQuery):
    await callback.message.answer(
        "<b>üìú –ò—Å—Ç–æ—Ä–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:</b>\n\n"
        "–¢—ã —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –≠—Ç–æ –Ω–∞—á–∞–ª–æ."
    )
    await callback.answer()

# üìÑ PDF
@dp.callback_query(F.data == "pdf")
async def send_pdf(callback: types.CallbackQuery):
    try:
        pdf_path = "challenge.pdf"
        pdf_file = FSInputFile(pdf_path)
        await callback.message.answer_document(pdf_file, caption="üìÑ –í–æ—Ç —Ñ–∞–π–ª —á–µ–ª–ª–µ–Ω–¥–∂–∞")
    except FileNotFoundError:
        await callback.message.answer("–§–∞–π–ª PDF –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

# üì• –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å?
@dp.callback_query(F.data == "how_to_get")
async def how_to_get(callback: types.CallbackQuery):
    await callback.message.answer(
        "<b>üì• –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª?</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üìÑ PDF –≤—ã—à–µ ‚Äî –∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Ñ–∞–π–ª.\n\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —Ñ–∞–π–ª –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É."
    )
    await callback.answer()

# /share
@dp.message(Command("share"))
async def share_cmd(message: types.Message):
    share_text = (
        "üö® –ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç GrayKit ‚Äî –∞–Ω–æ–Ω–∏–º–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –ø–æ–ª—å–∑–æ–π.\n"
        "üëâ https://t.me/GrayKitBot\n\n"
        "#–¥–æ–Ω–∞—Ç #—á–µ–ª–ª–µ–Ω–¥–∂ #–∞–Ω–æ–Ω–∏–º–Ω–æ"
    )
    await message.answer(share_text)

# üîÅ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

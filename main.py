import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

API_TOKEN = "YOUR_BOT_TOKEN_HERE"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

pdf_file_path = "gray_schemes_guide.pdf"
usdt_wallet = "TXkJ6dEkz5EmU7KoVRJMeFnBbc5kctiZAA"
ton_wallet = "EQDvKf-6l17S09Y0Eklufy8qL83DKxhJz7g1fIPhuykC5-bF"

fake_sales = 124
fake_remaining = 7

async def periodic_fake_updates():
    global fake_sales, fake_remaining
    while True:
        await asyncio.sleep(random.randint(180, 300))  # 3‚Äì5 –º–∏–Ω—É—Ç
        if fake_remaining > 1:
            fake_sales += 1
            fake_remaining -= 1

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí∏ –ö—É–ø–∏—Ç—å –∑–∞ 5 USDT", callback_data="buy_usdt"),
        InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –∑–∞ TON", callback_data="buy_ton"),
        InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ PDF", callback_data="description")
    )

    await message.answer(
        f"üïµÔ∏è –¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –±–∞–∑–µ —Å–µ—Ä—ã—Ö —Å—Ö–µ–º.\n"
        f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {fake_remaining} –∫–æ–ø–∏–π\n"
        f"üí¨ {fake_sales} —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∫—É–ø–∏–ª–∏ PDF –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤.",
        reply_markup=keyboard
    )

    await asyncio.sleep(30)
    await message.answer("üïî –í—Ä–µ–º—è –∏–¥—ë—Ç. –û—Å—Ç–∞–ª–æ—Å—å 6 –∫–æ–ø–∏–π. –ü–æ–ª—É—á–∏ PDF —Å–µ–π—á–∞—Å ‚Äî –∏–ª–∏ —É–ø—É—Å—Ç–∏—à—å.")

@dp.callback_query_handler(lambda c: c.data == 'buy_usdt')
async def process_buy_usdt(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.send_message(
        callback_query.from_user.id,
        f"üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏ 5 USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n`{usdt_wallet}`\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã PDF –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì3 –º–∏–Ω—É—Ç."
    )

@dp.callback_query_handler(lambda c: c.data == 'buy_ton')
async def process_buy_ton(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.send_message(
        callback_query.from_user.id,
        f"üí∞ –ü–µ—Ä–µ–≤–µ–¥–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 5 USDT –≤ TON –Ω–∞ –∞–¥—Ä–µ—Å:\n`{ton_wallet}`\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã PDF –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì3 –º–∏–Ω—É—Ç."
    )

@dp.callback_query_handler(lambda c: c.data == 'description')
async def process_description(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.send_message(
        callback_query.from_user.id,
        "üìÑ –í–Ω—É—Ç—Ä–∏ PDF —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "1. –°–µ—Ä—ã–µ —Å—Ö–µ–º—ã Telegram –∏ Instagram\n"
        "2. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–æ–≥—Ä–µ–≤–∞\n"
        "3. –ü–æ–¥–ø–æ–ª—å–Ω—ã–µ –ª–µ–Ω–¥–∏–Ω–≥–∏ –∏ –≤–∏—Ä—É—Å–Ω—ã–µ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏\n"
        "4. –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤, –æ—Ñ—Ñ–µ—Ä–æ–≤, –¥–æ–º–∏–Ω–æ–≤\n"
        "5. –ì–∞–π–¥—ã –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–µ\n\n"
        "–¶–µ–Ω–∞ ‚Äî 5 USDT –∏–ª–∏ TON."
    )

async def main():
    asyncio.create_task(periodic_fake_updates())
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())

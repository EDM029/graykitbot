import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã
def get_payment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å 5 USDT (TRC20)", url="https://tronscan.org/#/address/TUVCh2u3gqwU8kfwzgjmJMUFPXTneFf9Kk")],
        [InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –≤ TON", url="https://tonviewer.com/UQCBoBwjzbgw1eptiMrKbdpmX83al1qlaKFnUvI86zQnW4YP")],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid")]
    ])

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer(
        """<i>üß† –≠—Ç–æ –Ω–µ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ. –≠—Ç–æ ‚Äî –ø—Ä–æ–¥–∞–∂–∞ —Å–µ—Ä–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–¢—ã –ø–æ–ª—É—á–∞–µ—à—å PDF —Å —Ä–∞–±–æ—á–∏–º–∏ —Å–µ—Ä—ã–º–∏ —Å—Ö–µ–º–∞–º–∏.

üìâ –¶–µ–Ω–∞: –≤—Å–µ–≥–æ 5 USDT –∏–ª–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ TON.
üìà –°—á—ë—Ç—á–∏–∫: —É–∂–µ <b>134</b> —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è.

üëá –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å PDF.</i>""",
        reply_markup=get_payment_keyboard()
    )

@dp.callback_query(F.data == "paid")
async def paid_callback(callback: CallbackQuery):
    pdf_path = "Ultimate_Gray_Schemes.pdf"
    if os.path.exists(pdf_path):
        await callback.message.answer_document(FSInputFile(pdf_path))
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", show_alert=True)
    else:
        await callback.answer("‚ùå PDF –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", show_alert=True)

@dp.message(F.text.lower().startswith("–∏—Å—Ç–æ—Ä–∏—è"))
async def history_handler(message: Message):
    await message.answer(
        "<b>–ò—Å—Ç–æ—Ä–∏—è</b>\n\n–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç ‚Äî —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—ã–π –æ–ø—ã—Ç. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ—à—å PDF ‚Äî —Ç—ã –≤—Ö–æ–¥–∏—à—å –≤ –∏–≥—Ä—É, –≥–¥–µ –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π —Ä–µ—à–∏–º–æ—Å—Ç–∏. –î–µ–π—Å—Ç–≤—É–π ‚Äî –∏–ª–∏ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –Ω–∏ —Å —á–µ–º.",
        parse_mode="HTML"
    )

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
